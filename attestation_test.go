package c_polygonid

import (
	"context"
	"encoding/json"
	"testing"
	"testing/synctest"
	"time"

	"github.com/stretchr/testify/require"
)

func sleepTill(tm string) {
	tmParsed, err := time.Parse(time.RFC3339, tm)
	if err != nil {
		panic(err)
	}
	wait := tmParsed.Sub(time.Now())
	if wait < 0 {
		wait = 0
	}
	time.Sleep(wait)
}

func TestAttestationOk(t *testing.T) {
	req := `{
  "attestation_document": "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FfZhOpN3p3dqVWeg/tuvZTXMLaVZAsQwggLAMIICRaADAgECAhUAwlAmiSbVzRac3J294u7As883UsAwCgYIKoZIzj0EAwMwgYkxPDA6BgNVBAMMM2JhZDgwZWZlMDM2ODc2NWUuem9uYWwuZXUtd2VzdC0xLmF3cy5uaXRyby1lbmNsYXZlczEMMAoGA1UECwwDQVdTMQ8wDQYDVQQKDAZBbWF6b24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJXQTEQMA4GA1UEBwwHU2VhdHRsZTAeFw0yNTA1MTQwMDIyMjRaFw0yNTA1MTUwMDIyMjRaMIGOMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3RvbjEQMA4GA1UEBwwHU2VhdHRsZTEPMA0GA1UECgwGQW1hem9uMQwwCgYDVQQLDANBV1MxOTA3BgNVBAMMMGktMDlkMTQ4MTM5YzYyYzM0ZjEuZXUtd2VzdC0xLmF3cy5uaXRyby1lbmNsYXZlczB2MBAGByqGSM49AgEGBSuBBAAiA2IABDVUU+o2ghj2oFViRKYITQo1jYg8n6AKTZiuOUpX7wUiCrombyicNzOUR/C9G4PyY8ykBVXSmfBCxYQg/XL4YohymLWkmP+sh9gnIr0xg4dptwqxs8r/uzBAbS7Bj3oqDKNmMGQwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFDGi3ChWJydRfSMbFn9Zv6IVYDHJMB8GA1UdIwQYMBaAFBsrMX+Xf+oufGGZpmryHe5Mtw4KMAoGCCqGSM49BAMDA2kAMGYCMQDJy0A1DthhV4TZWlSruya9LIlBXDgiASh+OVitCDeJd49s1EvrkhzXRfub5zVGYcMCMQCHXfn8EVwhFZ0Vwv036jI29kGBUx1WzaOEVNc1G+vNrcfLga8a5r847U9zMu5ZAb1qcHVibGljX2tlefZpdXNlcl9kYXRhWQGVeyJrdHkiOiJSU0EiLCJuIjoiMlZVRHM1ZE1sNENkZjRtOUV4NFZBbkwza1c2dkN3d2Zsa2dTeUVkUU00UGFOY25pMmRWaWk1V0lVUjJMNU9JQjRTQkhGVkpiTTFkNlZRemhPcDRMUmpPa1dDclBkaGF3al9MUjJOZFhpWHhrX2lKZlBhekZWZzg1UmFHTWxmQVhwdVNmMHU4UVZuZkJFemlNWFhKdldPMGdoM043clMzaWQ3aWlzbzk1dE9kalFKMlRNTlFfTjBlWVFyaDlQZ2xLTE81UDFjX25jT1FsSmtPM1dwSnQ3cnU1SURjbVBFbTAxT3JPczdQbnRmM0h2RGozX19oeUhiMEFJZG1OUjBHM2VkOThKNS1iNjRaaXZRM1QwTy1LTEtMbUlQekVGek0tQ2FudHN1Si1nMmpYUlVmUkloemVFTDBHV1NWZ2dtN3Ixeld1eHFPaFR1ajJDcVB6UkFSM3JRIiwiZSI6IkFRQUIiLCJhbGciOiJSU0EtT0FFUC0yNTYiLCJleHQiOnRydWV9ZW5vbmNlWCB6TOzEkeAF1SmZE2fkUhSafsCszbai8jCINwUGd5DxClhg4OFcNMKArH1ftGuiHaJ8zSE06b4VAOmv46m08M+aL24BWQxoX08FrXAgV1KclaLyUgyugc34F/luoR+OMsokVY6XTyc4BObnFxLLjF6kMGcMZlr/OFwDgKw+umZhirSa"
}`
	synctest.Run(func() {
		sleepTill("2025-05-14T10:00:00Z")

		ctx := context.Background()
		cfg := EnvConfig{}
		resp, err := ValidateAttestationDocument(ctx, cfg, []byte(req))
		require.NoError(t, err)
		respBytes, err := json.Marshal(resp)
		require.NoError(t, err)

		wantResp := `{
  "public_key":"MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEY/s7mRnYExsmS0VFugI5HfrWl5kdKY+YeBzggGjjWLPhk2QCSM1Z7golL5cuSW6XaQXsxcrex+SBb6aWqWAGZq7OutuhcbsnXPwA4I8zAqlxbpyF4ErPM0409to8JeRu",
  "public_key_x_int":"15388542504520324476171640657579438676612130529851655176821161576470071444924069170672264429044721608610164893118103",
  "public_key_y_int":"16164541309092358414586115232129272321833058124662370311931211822193690991372220818267276579934067543842404906165358"
}`
		require.JSONEq(t, wantResp, string(respBytes))
		//t.Log(string(respBytes))
	})
}

func TestAttestationNotOK(t *testing.T) {
	req := `{
  "attestation_document": "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FfZhOpN3p3dqVWeg/tuvZTXMLaVZAsQwggLAMIICRaADAgECAhUAwlAmiSbVzRac3J294u7As883UsAwCgYIKoZIzj0EAwMwgYkxPDA6BgNVBAMMM2JhZDgwZWZlMDM2ODc2NWUuem9uYWwuZXUtd2VzdC0xLmF3cy5uaXRyby1lbmNsYXZlczEMMAoGA1UECwwDQVdTMQ8wDQYDVQQKDAZBbWF6b24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJXQTEQMA4GA1UEBwwHU2VhdHRsZTAeFw0yNTA1MTQwMDIyMjRaFw0yNTA1MTUwMDIyMjRaMIGOMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3RvbjEQMA4GA1UEBwwHU2VhdHRsZTEPMA0GA1UECgwGQW1hem9uMQwwCgYDVQQLDANBV1MxOTA3BgNVBAMMMGktMDlkMTQ4MTM5YzYyYzM0ZjEuZXUtd2VzdC0xLmF3cy5uaXRyby1lbmNsYXZlczB2MBAGByqGSM49AgEGBSuBBAAiA2IABDVUU+o2ghj2oFViRKYITQo1jYg8n6AKTZiuOUpX7wUiCrombyicNzOUR/C9G4PyY8ykBVXSmfBCxYQg/XL4YohymLWkmP+sh9gnIr0xg4dptwqxs8r/uzBAbS7Bj3oqDKNmMGQwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFDGi3ChWJydRfSMbFn9Zv6IVYDHJMB8GA1UdIwQYMBaAFBsrMX+Xf+oufGGZpmryHe5Mtw4KMAoGCCqGSM49BAMDA2kAMGYCMQDJy0A1DthhV4TZWlSruya9LIlBXDgiASh+OVitCDeJd49s1EvrkhzXRfub5zVGYcMCMQCHXfn8EVwhFZ0Vwv036jI29kGBUx1WzaOEVNc1G+vNrcfLga8a5r847U9zMu5ZAb1qcHVibGljX2tlefZpdXNlcl9kYXRhWQGVeyJrdHkiOiJSU0EiLCJuIjoiMlZVRHM1ZE1sNENkZjRtOUV4NFZBbkwza1c2dkN3d2Zsa2dTeUVkUU00UGFOY25pMmRWaWk1V0lVUjJMNU9JQjRTQkhGVkpiTTFkNlZRemhPcDRMUmpPa1dDclBkaGF3al9MUjJOZFhpWHhrX2lKZlBhekZWZzg1UmFHTWxmQVhwdVNmMHU4UVZuZkJFemlNWFhKdldPMGdoM043clMzaWQ3aWlzbzk1dE9kalFKMlRNTlFfTjBlWVFyaDlQZ2xLTE81UDFjX25jT1FsSmtPM1dwSnQ3cnU1SURjbVBFbTAxT3JPczdQbnRmM0h2RGozX19oeUhiMEFJZG1OUjBHM2VkOThKNS1iNjRaaXZRM1QwTy1LTEtMbUlQekVGek0tQ2FudHN1Si1nMmpYUlVmUkloemVFTDBHV1NWZ2dtN3Ixeld1eHFPaFR1ajJDcVB6UkFSM3JRIiwiZSI6IkFRQUIiLCJhbGciOiJSU0EtT0FFUC0yNTYiLCJleHQiOnRydWV9ZW5vbmNlWCB6TOzEkeAF1SmZE2fkUhSafsCszbai8jCINwUGd5DxClhg4OFcNMKArH1ftGuiHaJ8zSE06b4VAOmv46m08M+aL24BWQxoX08FrXAgV1KclaLyUgyugc34F/luoR+OMsokVY6XTyc4BObnFxLLjF6kMGcMZlr/OFwDgKw+umZhirSa"
}`
	synctest.Run(func() {
		sleepTill("2025-12-25T10:00:00Z")

		ctx := context.Background()
		cfg := EnvConfig{}
		_, err := ValidateAttestationDocument(ctx, cfg, []byte(req))
		require.ErrorContains(t, err,
			`failed to verify attestation certificate chain: x509: certificate has expired or is not yet valid: current time`)
	})
}
